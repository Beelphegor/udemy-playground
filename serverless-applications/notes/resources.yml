# dynamodb table
notesTable:
  Type: AWS::DynamoDB::Table
  Properties:
    TableName: notes-${self:provider.stage}
    BillingMode: PAY_PER_REQUEST
    AttributeDefinitions:
      - AttributeName: notesId
        AttributeType: S
    KeySchema:
      - AttributeName: notesId
        KeyType: HASH

# Cognito user pool
cognitoUserPool: 
  Type: AWS::Cognito::UserPool
  Properties:
    UserPoolName: notes-UP-${self:provider.stage}

# User pool webclient
cognitoUserPoolWebClient: 
  Type: AWS::Cognito::UserPoolClient
  Properties: 
    UserPoolId: !Ref cognitoUserPool
    ClientName: web
    AllowedOAuthFlows: 
      - implicit
    CallbackURLs: 
      - http://localhost:3000
    AllowedOAuthFlowsUserPoolClient: true
    SupportedIdentityProviders:
      - COGNITO
    AllowedOAuthScopes: 
      - phone
      - email
      - profile
      - openid

# Cognito user pool domain
cognitoUserPoolDomain:
  Type: AWS::Cognito::UserPoolDomain
  Properties: 
    Domain: serverless-notes-cd-${self:provider.stage}
    UserPoolId: !Ref cognitoUserPool


# Application parameters
userPoolIdParam:
  Type: AWS::SSM::Parameter
  Properties:
    Name: /notes/${self:provider.stage}/userPoolId
    Type: String
    Value: !GetAtt cognitoUserPool.Arn

